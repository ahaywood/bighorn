// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model Newsletter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  id                  String    @id @default(uuid())
  name                String
  email               String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  role                Role      @relation(fields: [roleId], references: [id])
  roleId              Int
  Comment             Comment[]
  createdAt           DateTime  @default(now())
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  User      User[]
}

model Comment {
  id              String    @id @default(uuid())
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  comment         String
  parentComment   Comment?  @relation("thradedComments", fields: [parentCommentId], references: [id])
  parentCommentId String?
  visible         Boolean   @default(true)
  flagged         Boolean   @default(false)
  bookmarked      Boolean   @default(false)
  editCount       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Comment         Comment[] @relation("thradedComments")
}

model Likes {
  id        Int      @id @default(autoincrement())
  commentId String
  userId    String
  createdAt DateTime @default(now())
}
